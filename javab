#!/bin/bash

# (public)
function usage {
    cat<<EOF>&2

Synopsis

 $0 [directive]

Directives

  test-self           Perform the installation test.
  test-env            Perform the environment test.
  test-layout         Perform the file layout test.

  read-conf <n>       Read a named variable from 'javab.txt'.  If 
                      the configured value names an executable shell
                      script in the working directory, evaluate the
                      name as './\${name}'.

  file-rt             Print the location of 'rt.jar' bootclasspath.
  file-tools          Print the location of 'tools.jar'.
  file-tgt            Print the location of the target jar file.

  dir-lib             Print one or more 'lib' directories, configured and './lib'.
  dir-src             Print the location of the 'src' directory.
  dir-res             Print the location of the 'res' directory.
  dir-pkg             Print the location of the 'pkg' directory.

  path-lib            Print the classpath derived from 'dir-lib'.
  path-class          Print the classpath for 'javac'.

  list-sources        Print listing of JPL files found under 'src'.
  gen-keystore        Add a developer keystore to a configuration.

  init                Write configuration file, generate a keystore.
  target              Print jar file name from configured name and version.
  compile             Compile JPL files from 'src' to 'bin'.
  package             Package object binaries from 'bin' to jar.
  build               Perform compile and package without signing.
  sign                Employ the configured keystore to sign the JAR.
  clean               Drop 'jar' file and 'bin' directory.

Configuration

  The file 'javab.txt' located in an application root directory has
  the general syntactic form of a java properties file, "name=value"
  and "#" line comments.  

  The following is an example of a configuration file.

    # 
    # Configuration parameters recognized by 'javab'.
    # See https://github.com/syntelos/sh-javab
    #
    lib_dir=../lib


  The following configuration names are employed by the script.

    name                   Project name, see 'target'.

    version                Project version, see 'target'.

    src_dir                The location of the root of a JPL source code 
                           namespace, e.g. "src" in the directory path
                           "src/com/example/application".

    res_dir                The location of the root of the resource file 
                           namespace, e.g. "res" in the directory path
                           "res/layout".

    lib_dir                The location of the root of a java library  
                           namespace, e.g. "lib" in the directory path
                           "lib/example-dep-library.jar".

    classpath              A library path ':' for javac to employ.

    extra_classpath        A library path ':' to append to the contents 
                           of <lib>.

    main-class             The fully qualified classname for a class 
                           containing a public, static 'main' function.

Caveats

    This script (creates and) destroys the directory 'bin'.

EOF
    exit 1
}
##
function line_conf {
    n="${1}"
    if [ -n "${n}" ]&&[ -f javab.txt ]
    then
	if lno=$(egrep -n "^${n}=" javab.txt | sed 's/:.*//')&&[ -n "${lno}" ]&&[ 0 -lt ${lno} ]
	then
	    echo ${lno}

	    return 0
	else
	    return 1
	fi
    else
	return 1
    fi
}
function write_conf {
    n="${1}"
    v="${2}"
    if init_conf && [ -n "${n}" -a -n "${v}" ]
    then

	if lno=$(line_conf ${n})
	then
	    if cat javab.txt | sed -e "${lno}s#=.*#=${v}#;" > /tmp/tmp && cp /tmp/tmp javab.txt
	    then
		return 0
	    else
		return 1
	    fi
	else
	    echo "${n}=${v}" >> javab.txt

	    return 0
	fi
	return 0
    else
	return 1
    fi
}
# (public)
function test_self {
    if a=$(2>/dev/null which javab) && b=${HOME}/bin/javab && [ "${a}" = "${b}" ]
    then
	return 0
    else
	return 1
    fi
}
function test_env {

    if [ -n "${JAVA_HOME}" ]&&[ -d "${JAVA_HOME}" ]&&[ -d "${JAVA_HOME}/jre" ]
    then
	return 0
    else
	return 1
    fi
}
function test_layout {

    if 1>/dev/null dir_src
    then
	return 0
    else
	return 1
    fi
}
function read_conf {
    n="${1}"
    if [ -n "${n}" ]&&[ -f javab.txt ]&& test_env && rt=$(file_rt) && tools=$(file_tools)
    then
	if v=$(2>/dev/null egrep -e "^${n}=" javab.txt | sed -e 's/^.*=//; s/^://; s/:$//;' -e "s#%file_rt%#${rt}#g; s#%file_tools%#${tools}#g;") &&[ -n "${v}" ]
	then
	    if [ -x "${v}" ]&& rv=$(2>/dev/null ./${v} ) && [ -n "${rv}" ]
	    then
		echo ${rv}
	    else
		echo ${v}
	    fi
	    return 0
	else
	    return 1
	fi
    else
	return 1
    fi
}
function file_rt {

    if p="${JAVA_HOME}/jre/lib/rt.jar" &&[ -f "${p}" ]
    then
	echo ${p}
	return 0
    else
	return 1
    fi
}
function file_tools {

    if p="${JAVA_HOME}/lib/tools.jar" &&[ -f "${p}" ]
    then
	echo ${p}
	return 0
    else
	return 1
    fi
}
function dir_lib {

    rc=1

    if [ -d lib ]
    then
	echo lib

	rc=0
    fi

    if d=$(read_conf 'lib_dir') &&[ -d "${d}" ]
    then
	echo ${d}
	return 0
    else
	return ${rc}
    fi
}
function dir_src_ln {

    dir_src | tr '\n' ' '
}
function dir_src {


    if d=$(read_conf 'src_dir') &&[ -n "${d}" ]
    then
	cc=0

	for n in ${d}
	do
	    cc=$(( ${cc} + 1 ))

	    echo ${n}
	done

	if [ 0 -lt ${cc} ]
	then
	    return 0
	else
	    return 1
	fi

    elif [ -d src ]
    then
	echo src

	return 0

    else
	return 1
    fi
}
function dir_res {

    if [ -d res ]
    then
	echo res
	return 0

    elif d=$(read_conf 'res_dir') &&[ -d "${d}" ]
    then
	echo ${d}

	return 0

    elif d=$(find . -type d -name res | tail -n 1 )&& [ -n "${d}" ]&& [ -n "$(find ${d} -type f -name '*.xml')" ]
    then
	echo ${d}
	return 0


    else
	return 1
    fi
}
function dir_pkg {

    if [ -d pkg ]
    then
	echo pkg
	return 0

    elif d=$(read_conf 'pkg_dir') &&[ -d "${d}" ]
    then
	echo ${d}

	return 0

    else
	return 1
    fi
}
function path_lib {
    if test_env
    then
	if ld=$(dir_lib) && flist=$(find ${ld} -name '*.jar' ) &&[ -n "${flist}" ]
	then
	    echo ${flist} | tr '\n' ':' | tr ' ' ':' | sed 's/:$//'

	    return 0
	else
	    return 1
	fi
    else
	return 1
    fi
}
function path_class {
    if test_env
    then
	
	if cp=$(read_conf 'classpath')
	then
	    echo ${cp}

	    return 0
	else
	    extra=$(read_conf 'extra_classpath')

	    if lp=$(path_lib)&& [ -n "${lp}" ]
	    then
		if [ -n "${extra}" ]
		then
		    echo "${lp}:${extra}"
		else
		    echo "${lp}"
		fi
		return 0

	    elif [ -n "${extra}" ]
	    then
		echo "${extra}"
		return 0
	    else
		return 0
	    fi
	fi
    else
	return 1
    fi
}
function list_sources {
    if test_env && test_layout 
    then
	if s=$(dir_src_ln)&& find ${s} -type f -name '*.java'
	then
	    return 0
	else
	    return 1
	fi
    else
	return 1
    fi
}
function init_conf {

    if [ -f javab.txt ]
    then
	return 0

    elif cat<<EOF>javab.txt
# 
# Configuration parameters recognized by 'javab'.
# See https://github.com/syntelos/sh-javab
#
name=$(basename $(pwd))
version=
EOF
    then
	return 0
    else
	return 1
    fi
}
function gen_keystore {

    if ks=$(read_conf 'keystore')&& ka=$(read_conf 'keystore_alias')&& [ -f "${ks}" ]
    then
	return 1

    elif [ -n "${ks}" ]&&[ -n "${ka}" ]
    then
        
	cmd="keytool -alias ${ka} -genkeypair -validity 365 -keystore ${ks} -keyalg RSA -keysize 2048 -storetype pkcs12"
	1>&2 echo "${cmd}"

	if ${cmd}
	then
	    return 0
	else
	    1>&2 echo "$0 error (gen_keystore) from '${cmd}'."
	    return 1
	fi

    else
	ks=".keystore.pkcs12"
        ka="devkey"

	if write_conf keystore ${ks} && write_conf keystore_alias ${ka}
	then

	    if [ ! -f ${ks} ]
	    then
		cmd="keytool -alias ${ka} -genkeypair -validity 365 -keystore ${ks} -keyalg RSA -keysize 2048 -storetype pkcs12"
		1>&2 echo "${cmd}"

		if ${cmd}
		then
		    return 0
		else
		    1>&2 echo "$0 error (gen_keystore) from '${cmd}'."
		    return 1
		fi
	    else
		return 1
	    fi
	else
	    return 1
	fi
    fi
}
function target {
    if n=$(read_conf 'name') && v=$(read_conf 'version')
    then
	if [ -n "${n}" ]&&[ -n "${v}" ]
	then
	    target=${n}-${v}.jar
	    echo $target
	    return 0

	elif [ -n "${n}" ]
	then
	    target=${n}.jar
	    echo $target
	    return 0

	else
	    return 1
	fi
    else
	return 1
    fi
}
function compile {
    if test_env && cp=$(path_class)&& fli=$(list_sources)&& [ -n "${fli}" ]
    then

	if [ ! -d bin ]
	then
	    mkdir bin
	fi

	if [ -n "${cp}" ]
	then
	    cmd="javac -source 1.7 -target 1.7 -d bin -cp ${cp}"
	else
	    cmd="javac -source 1.7 -target 1.7 -d bin"
	fi
	1>&2 echo "${cmd} $(dir_src_ln)//*.java"

	if ${cmd} ${fli}
	then
	    return 0
	else
	    1>&2 echo "$0 (compile) error from '${cmd}'."

	    return 1
	fi
    else
	return 1
    fi
}
function package {
    if test_env && test_layout &&[ -d bin ]&& jarf=$(target) &&[ -n "${jarf}" ]
    then
	if resd=$(dir_res)&&[ -d "${resd}" ]
	then
	    if cd "${resd}" && tar cfp /tmp/res $(find . -type f )
	    then
		cd ~-
		if cd bin && tar xfp /tmp/res
		then
		    cd ~-
		else
		    cat<<EOF>&2
$0 error unpacking resources.
EOF
		    exit 1
		fi
	    else
		cat<<EOF>&2
$0 error packing resources.
EOF
		exit 1
	    fi
	fi

	tmpf=/tmp/javab.manifest.$$

	if main=$(read_conf 'main-class')&&[ -n "${main}" ]
	then
	    cat<<EOF>>${tmpf}
Main-Class: ${main}
EOF
        else
	    touch ${tmpf}
	fi

	if cp=$(path_class)&&[ -n "${cp}" ]
	then
	    cat<<EOF>>${tmpf}
Class-Path: $(echo ${cp} | sed 's%:% %g;')
EOF
        else
	    touch ${tmpf}
	fi

	if pd=$(dir_pkg)&&[ -n "${pd}" ]
	then
            #
            # Package file specification (ordered):
            #   Comment := '^#.*$'
            #   Required := 'Name: ([a-z]+/)+'
            #   Optional := 'Sealed: true'
            #   Optional := 'Specification-Title: "<lit-string>"'
            #   Optional := 'Specification-Version: "<v-dot-string>"'
            #   Optional := 'Specification-Vendor: "<lit-string>"'
            #   Nominal := 'Implementation-Title: "<lit-string>"'
            #   Nominal := 'Implementation-Version: "<v-dot-string>"'
            #   Nominal := 'Implementation-Vendor: "<lit-string>"'
            #
            for pkg_fil in $(find ${pd} -type f -name '*.txt')
            do
                echo >>${tmpf}
	        egrep -v '^#' ${pkg_fil} >>${tmpf}
            done
        else
	    touch ${tmpf}
	fi

        #cat -n ${tmpf}

	cmd="jar cmf ${tmpf} ../${jarf} *"
	1>&2 echo "${cmd}"

	if cd bin && ${cmd}
	then
	    cd ~-
	    2>/dev/null rm -rf ${tmpf} bin

	    return 0
	else
	    return 1
	fi
    else
	return 1
    fi
}
function sign {
    
    if test_env && ks=$(read_conf 'keystore') && ka=$(read_conf 'keystore_alias') && tgtf=$(target) &&[ -f ${tgtf} ]
    then
	cmd="jarsigner -keystore ${ks} ${tgtf} ${ka}"
	1>&2 echo "${cmd}"

	if ${cmd}
	then
	    return 0
	else
	    1>&2 echo "$0 (sign) error from '${cmd}'."

	    return 1
	fi
    else
	return 1
    fi
}
function build {

    if compile && package
    then
	return 0
    else
	return 1
    fi
}
function clean {

    if flist=$(2>/dev/null ls *.jar) &&[ -n "${flist}" ]
    then
	rm -f ${flist}
    fi

    if [ -d bin ]
    then
	rm -rf bin
    fi

    return 0
}

#
#
if [ -n "${1}" ]
then
    directive="${1}"
    shift

    case "${directive}" in
	test-self)
	    if test_self
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	test-env)
	    if test_env
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	test-layout)
	    if test_layout
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	read-conf)
	    if read_conf "${1}"
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	file-rt)
	    if file_rt
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	file-tools)
	    if file_tools
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	file-tgt)
	    if target
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	dir-lib)
	    if dir_lib
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	dir-src)
	    if dir_src
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	dir-res)
	    if dir_res
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	dir-pkg)
	    if dir_pkg
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	path-lib)
	    if path_lib
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	path-class)
	    if path_class
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	list-sources)
	    if list_sources
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	gen-keystore)
	    if gen_keystore
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	init)
	    if gen_keystore
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	target)
	    if target
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	compile)
	    if compile
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	package)
	    if package
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	sign)
	    if sign
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	build)
	    if build
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	clean)
	    if clean
	    then
		exit 0
	    else
		exit 1
	    fi
	    ;;
	*)
	    usage
	    ;;
    esac
else
    usage
fi
